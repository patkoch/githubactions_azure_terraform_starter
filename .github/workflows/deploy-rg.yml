on: workflow_dispatch
name: deploy-resource-group
jobs:
  prepare-and-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Verification whether the environment variables have values set
        run: |
          if [ -z "${{ vars.STORAGE_ACCOUNT_NAME }}" ]; then
            echo "STORAGE_ACCOUNT_NAME is not set"
            exit 1
          else
            echo "STORAGE_ACCOUNT_NAME is set: ${{ env.STORAGE_ACCOUNT_NAME }}"
          fi
          if [ -z "${{ vars.RESOURCE_GROUP_NAME }}" ]; then
            echo "RESOURCE_GROUP_NAME is not set"
            exit 1
          else
            echo "RESOURCE_GROUP_NAME is set: ${{ env.RESOURCE_GROUP_NAME }}"
          fi

      - name: Verification whether the required repository secrets have values set
        run: |
          if [ -z "${{ secrets.CLIENT_ID }}" ]; then
            echo "CLIENT_ID is not set"
            exit 1
          fi
          if [ -z "${{ secrets.CLIENT_SECRET }}" ]; then
            echo "CLIENT_SECRET is not set"
            exit 1
          fi
          if [ -z "${{ secrets.TENANT_ID }}" ]; then
            echo "TENANT_ID is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SUBSCRIPTION_ID }}" ]; then
            echo "SUBSCRIPTION_ID is not set"
            exit 1
          fi
      - name: Login with Service Principal
        run: |
          echo "Logging in with Service Principal"
          az login --service-principal -u ${{ secrets.CLIENT_ID }} -p ${{ secrets.CLIENT_SECRET }} --tenant ${{ secrets.TENANT_ID }}
      - name: Verify whether storageaccount exists
        run: |
          echo "Verifying whether storageaccount exists"

          storageAccountName=${{ vars.STORAGE_ACCOUNT_NAME }}
          resourceGroupName=${{ vars.RESOURCE_GROUP_NAME }}

          accountExists=$(az storage account show --name $storageAccountName --resource-group $resourceGroupName --query "name" --output tsv 2>/dev/null)

          if [ -z "$accountExists" ]
          then
            echo "Storage account does not exist"
            exit 1
          else
            echo "Storage account exists"
          fi    
  provision-resources:
    runs-on: ubuntu-latest
    needs: prepare-and-validate
    steps:
      - name : Checkout the repository
        uses: actions/checkout@v3
      - name: List files in the checkout directory
        run: ls -R
      - name: Conduct Terraform init
        run: |
          export ARM_CLIENT_ID=${{ secrets.CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.TENANT_ID }}
          export ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}
          terraform init
      - name: Conduct Terraform fmt
        run: |
          terraform fmt
      - name: Conduct Terraform validate
        run: |
          terraform validate
      - name: Conduct Terraform plan
        run: |-
          export ARM_CLIENT_ID=${{ secrets.CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.TENANT_ID }}
          export ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}
          terraform plan -out "tfplan"
      - name: Conduct Terraform apply
        run: |-
          export ARM_CLIENT_ID=${{ secrets.CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.TENANT_ID }}
          export ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}
          terraform apply -auto-approve "tfplan"